// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Account model - represents a customer/tenant
model Account {
  id    String  @id @default(cuid())
  name  String
  email String  @unique

  // Relations
  users    User[]
  dids     Did[]
  trunks   SipTrunk[]
  callLogs CallLog[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("accounts")
}

// User model - individual users/agents
model User {
  id       String @id @default(cuid())
  email    String @unique
  password String // hashed
  name     String

  role     String @default("agent") // admin, manager, agent
  isActive Boolean @default(true)

  // Relations
  account   Account @relation(fields: [accountId], references: [id], onDelete: Cascade)
  accountId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([accountId])
  @@map("users")
}

// SipTrunk model - VoIP trunk providers
model SipTrunk {
  id       String @id @default(cuid())
  name     String
  host     String
  port     Int    @default(5060)
  username String?
  password String?
  
  // Connection status
  status   String @default("UNREGISTERED") // REGISTERED, UNREGISTERED, ERROR
  
  // Relations
  account  Account @relation(fields: [accountId], references: [id], onDelete: Cascade)
  accountId String
  
  dids     Did[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([host, accountId])
  @@index([accountId])
  @@map("sip_trunks")
}

// DID model - Phone numbers
model Did {
  id           String @id @default(cuid())
  phoneNumber  String
  country      String // MX, US, GB, CO, ES, etc
  
  // Routing configuration
  routeType    String // AGENT, IVR, QUEUE, N8N_WEBHOOK
  routeTarget  String // ID or URL of destination
  
  // Status
  status       String @default("INACTIVE") // ACTIVE, INACTIVE, PROVISIONING
  
  // Relations
  trunk        SipTrunk? @relation(fields: [trunkId], references: [id], onDelete: SetNull)
  trunkId      String?
  
  account      Account @relation(fields: [accountId], references: [id], onDelete: Cascade)
  accountId    String
  
  callLogs     CallLog[]

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@unique([phoneNumber, accountId])
  @@index([accountId])
  @@index([trunkId])
  @@map("dids")
}

// CallLog model - Call history and recordings
model CallLog {
  id           String @id @default(cuid())
  
  // Call parties
  did          Did @relation(fields: [didId], references: [id], onDelete: Cascade)
  didId        String
  
  fromNumber   String
  toNumber     String
  
  // Call details
  duration     Int    @default(0) // seconds
  status       String @default("INITIATED") // INITIATED, RINGING, ACTIVE, COMPLETED, FAILED
  
  // Recording and transcript
  recordingUrl String?
  transcript   Json?  // Array of {speaker, text, timestamp}
  
  // Relations
  account      Account @relation(fields: [accountId], references: [id], onDelete: Cascade)
  accountId    String

  // Timestamps
  startTime    DateTime
  endTime      DateTime?

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([didId])
  @@index([accountId])
  @@index([startTime])
  @@map("call_logs")
}